#!/bin/bash

#name
#   Kill - Send signal to process
#Usage
#   Kill [-signal] ProcessName
#Return
#   0 exit correctly
#   1 error

SystemType() {
    # Usage:
    #   SystemType
    _HOSTNAME=`hostname | sed 's/\..*//'`
    case `uname -s` in
        FreeBSD ) echo FREEBSD ;;
        Linux ) echo LINUX ;;
        AIX ) echo AIX ;;
        HP-UX ) echo HP ;;
        IRIX ) echo SGI ;;
        OSF1 ) echo ULTRTX ;;
        SunOS ) case `uname -r` in
                    4* ) echo SUNBSD ;;
                    5* ) echo SOLARIS ;;
                esac
                ;;
        $_HOSTNAME ) case `uname -m` in
                            IP* ) echo SGI ;;
                            i386 ) echo SCO ;;
                     esac
                     ;;
    esac
}

GetYesNo() {
    # Usage
    # GetYesNo "message"
    _ANSWER=
    if [ $# -eq 0 ]; then
        echo "Usage: GetYesNo message" 1>&2
        exit 1
    fi

    while :
    do
        if [ "`echo -n`" = "-n" ]; then
            echo "$@\c"
        else
            echo -n "$@"
        fi
        read _ANSWER
        case "$_ANSWER" in
            [yY] | yes | YES | Yes ) return 0   ;;
            [nN] | no  | NO  | No  ) return 1   ;;
            * ) echo "Please enter y or n."     ;;
        esac
    done
}

PATH=$PATH:`dirname $0`

CMDNAME=`basename $0`
USAGE="Usage: $CMDNAME [-signal] ProcessName"
OLD_IFS=$IFS
SIGNAL=
NAME=
PID=
PROCNAME=
OWNER=
PS_OPTS=
PROCESS_LIST=/tmp/list.$$
TITLE_PRINTED=FALSE
FOUND=FALSE
LINE=
COL=
SYSTEM=`SystemType`

trap 'rm -f /tmp/*.$$; exit 1' 1 2 3 15


# option [-signal]
case $1 in
    -- )    shift
            ;;
    -* )    SIGNAL=$1
            shift
            ;;
esac

# paramter ProcessName
if [ $# -ne 1 ]; then
    echo "$USAGE" 1>&2
    exit 1
fi
NAME=$1


case $SYSTEM in
    LINUX )                     PS_OPTS="auxw"  ;;
    FREEBSD | SUNBSD | ULTRIX ) PS_OPTS="-auxw" ;;
    * )                         PS_OPTS="-ef"   ;;
esac

ps $PS_OPTS             |
    sed '1d'            |
    grep "$NAME"        |
    grep -v "$0"        |
    grep -v "ps $PS_OPTS" > "$PROCESS_LIST"

exec < $PROCESS_LIST
IFS=
while read LINE; do
    IFS=$OLD_IFS
    set $LINE
    OWNER=$1
    PID=$2

    case $SYSTEM in
        LINUX )                     COL=64 ;;
        FREEBSD )                   COL=63 ;;
        AIX | HP | SGI | SOLARIS )  COL=48 ;;
        SUNBSD | DECOSF )           COL=57 ;;
        ULTRIX )                    COL=51 ;;
        * ) echo "Unexpected system type." 1>&2
            exit 1
            ;;
    esac

    LINE=`echo "$LINE" | cut -c$COL`
    set dummy $LINE
    shift
    PROCNAME=$1
    if [ "$PROCNAME" = "$NAME" -o \
         "`basename $PROCNAME`" = "$NAME" ]; then
        FOUND=TRUE

        if [ "$TITLE_PRINTED" = "FALSE" ]; then
        echo "PID Owner Process"
        TITLE_PRINTED=TRUE
        fi

        if GetYesNo \
            "$PID $OWNER $PROCNAME (y/n)? " </dev/tty
        then
            kill $SIGNAL $PID
        fi
    fi
    IFS=
done

if [ "$FOUND" = "FALSE" ]; then
    echo "Process \"$NAME\" not found."
fi

rm -rf /tmp/*.$$
exit 0
